// API definition for Admin service.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "xyz.breakit.admin";
option java_outer_classname = "AdminProto";

package geese;

import "google/protobuf/duration.proto";
import "google/rpc/status.proto";

/*
 * Admin service. Allows failure injections, enabling partial degradation.
 */
service AdminService {
    /*
     * Injects failures to server requests.
     */
    rpc InjectFailure (InjectFailureRequest) returns (InjectFailureResponse);

    /*
     * Enables/disabled partial degradation of a service.
     * Details of a degradation are service-specific.
     */
    rpc ManagePartialDegradation (PartialDegradationRequest)
        returns (PartialDegradationResponse);

}

/*
 * Service to check server health status.
 */
service HealthCheckService {

    /*
     * Returns current status of failure injections.
     */
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

/*
 * Request to inject failures to server requests.
 */
message InjectFailureRequest {
    /*
     * Service name to inject failure for.
     */
    string service_name = 1;
    /*
     * Failure to be added.
     */
    oneof failure {
        /*
         * If set, adds latency to service requests.
         */
        AddedLatencySpec added_latency = 2;
    }
    /*
     * Fixture (logical) failure to be added.
     */
    FixtureFailureSpec fixture_failure = 3;
}

/*
 * Describes added latency.
 * Contains probability and duration of added latency.
 */
message AddedLatencySpec {
    /*
     * Probability of adding latency, a double between
     * {@code 0.0} and {@code 1.0}.
     * For adding latency to all the calls should be set to {@code 1.0}.
     * For adding latency to half of the calls (50%) should be set to
     * {@code 0.5}. {@code 0.0} means no added latency.
     */
    double probability = 1;
    /*
     * Duration to be added to server calls.
     */
    google.protobuf.Duration duration = 2;
}

/*
 * Discribes fixture failure that can be injected.
 */
message FixtureFailureSpec {
    /*
     * When true, game fixture will be full of elements.
     */
    bool full_fixture_enabled = 1;
}

message FailureCodeSpec {
    /* set failure probability, when 0 - failure is not trigerred,
    when larger than 0 - triggered with a specified code

    0. == 0%
    1.0 == 100%
    */
    double failure_probability = 1;

    oneof failure_code {
        /* GRPC failure status code to inject */
        google.rpc.Status grpc_status_code = 2;

        /* HTTP Failure status code to inject*/
        int32 http_status_code = 3;
    }
}

/*
 * Response message, currently empty.
 */
message InjectFailureResponse {
}

/*
 * Request to enable or disable partial degradation of a service
 */
message PartialDegradationRequest {
    /*
     * Service name to add latency for.
     */
    string service_name = 1;
    /*
     * true if partial degradation should be enabled,
     * false if disabled.
     */
    bool enable = 2;
}

/*
 * Response to manage partial degradation response.
 */
message PartialDegradationResponse {
    /*
     * true if partial degradation is enabled, false otherwise.
     */
    bool enabled = 1;
}

/*
 * Health check request. Currently empty.
 */
message HealthCheckRequest {
}

/*
 * Response contains current state of injected failures.
 */
message HealthCheckResponse {
    /*
     * List of service statuses. Contains one element per servcie.
     */
    repeated ServiceHealthCheckStatus service_health_status = 1;
}

/*
 * Contains current state of injected failures for a service.
 */
message ServiceHealthCheckStatus {
    /*
     * Service name.
     */
    string service_name = 1;
    /*
     * true if partial degradation is enabled,
     * false if disabled.
     */
    bool partial_degradation_enabled = 2;
    /*
     * true if retries are enabled,
     * false if disabled.
     */
    bool retry_enabled = 3;
    /*
     * Currently injected added latency failure.
     * Empty message if not injected.
     */
    AddedLatencySpec added_latency = 4;
    /*
     * Currently injected fixture failure.
     * Empty message if not injected.
     */
    FixtureFailureSpec fixture_failure = 5;

    /*
     * Currently injected code failure.
     * Empty message if not injected.
     */
    FailureCodeSpec code_failure = 6;
}
