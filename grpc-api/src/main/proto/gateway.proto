// API definition for API Gateway service.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "xyz.breakit.gateway";
option java_outer_classname = "GatewayProto";

import "geese_shared.proto";
import "clouds_shared.proto";
import "leaderboard_shared.proto";

package gateway;


/*
 * Unary service to request game fixture.
 */
service FixtureService {
    /*
     * Return next lines of a game fixture.
     */
    rpc GetFixture (GetFixtureRequest) returns (FixtureResponse);
}

/*
 * Leaderboard, service to keep track of top players.
 */
service LeaderboardService {
    /*
     * Returns current top scores (up to a requested number).
     */
    rpc GetTopScores (leaderboard.TopScoresRequest) returns (leaderboard.TopScoresResponse);
    /*
     * Updates single player's score.
     */
    rpc UpdateScore (leaderboard.UpdateScoreRequest) returns (leaderboard.UpdateScoreResponse);
}

/*
 * Streaming leaderboard service.
 */
service StreamingLeaderboardService {
    /*
     * Returns a stream of current top scores
     */
    rpc GetTopScores (leaderboard.TopScoresRequest) returns (stream leaderboard.TopScoresResponse);
}


/*
 * Service to generate player id.
 * Client should call this method to recieve a uniqie player id.
 */
service PlayerIdService {
    /*
     * Generates next Player id.
     */
    rpc GeneratePlayerId(GeneratePlayerIdRequest) returns (GeneratePlayerIdResponse);
}

/*
 * Request to recieve next lines.
 */
message GetFixtureRequest {
    /*
     * Number of requested horizontal lines.
     */
    int32 lines_count = 1;
    /*
     * Line width: max number of elements in one sceen horizontal line.
     */
    int32 line_width = 2;
    /*
     * Single goose width in pixels.
     * This arguments is used to make sure geese in one line don't overlap.
     */
    int32 goose_width = 3;
    /*
     * Single cloud width in pixels.
     * This arguments is used to make sure clouds in one line don't overlap.
     */
    int32 cloud_width = 4;
}

/*
 * Contains list of horizontal fixture lines.
 */
message FixtureResponse {
    /*
     * Horizontal fixture lines, up to a requested number.
     */
    repeated FixtureLine lines = 1;
}

/*
 * Contains goose and cloud positions in a horizontal line.
 */
message FixtureLine {
    /*
     * Array of geese, complete with positions and types.
     */

    repeated geese.GooseLocator goose_locators = 1;
    /*
     * Array of clouds, complete with positions.
     */
    repeated clouds.CloudLocator cloud_locators = 2;

    /*
     * Array of geese types. For each goose in the geese_position array,
     * there should be a corresponding goose type on the same position in geese_types array.
     */
    repeated geese.GooseType geese_types = 3;

}


/*
 * Request for player id generation. Empty message.
 */
message GeneratePlayerIdRequest {
}

/*
 * Response with a generated player id.
 */
message GeneratePlayerIdResponse {
    string player_id = 1;
}
